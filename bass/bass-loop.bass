; memoize dependency resolution
(def *memos* *dir*/bass.lock)

(use (.git (linux/alpine/git))
     (git:github/vito/tabs/ref/nixery/nix.bass))

(defn nixery [src]
  (nix:nixery src/flake.lock))

; sets up $PATH appropriately and caches dependencies + builds
(defn with-go [thunk]
  (-> thunk
      (with-env {:GOPATH "/go"
                 :GOCACHE "/gocache"
                 :PATH "/go/bin:/share/go/bin:/usr/bin:/bin"})
      (with-mount (cache-dir "bass-loop/gopath") /go/)
      (with-mount (cache-dir "bass-loop/gocache") /gocache/)))

(defn mod-version [src mod]
  ; starts services, waits for their addrs, evals body, stops services
  (let [nixery (nix:nixery src/flake.lock)]
    (-> ($ rg -r "$1" -o (str mod " v(.*)") src/go.mod)
        (with-image (nixery:linux/ripgrep))
        (read :unix-table)
        next
        first)))

; a basic test: does it build?
(defn build [src]
  (let [nixery (nix:nixery src/flake.lock)
        bud-version (mod-version src "github.com/livebud/bud")]
    (from (nixery:linux/shell/go/gcc/git/yarn/gnumake)
      (cd src/
        ; NB: the officially released bud binaries are not statically typed and
        ; don't work in Nix so just just compile it in a way identical to the
        ; released binary until bud is added to nixpkgs
        (with-go ($ go install
                    -trimpath
                    --ldflags (str "-X github.com/livebud/bud/internal/versions.Bud=" bud-version)
                    "github.com/livebud/bud"))

        ; pull in bud dependencies
        ($ yarn)

        ; build ./bud/app
        (with-go ($ bud build))))))

; returns a thunk that runs the bass-loop server
(defn server [src]
  (from (build src)
    (-> ($ ./bud/app)
        (with-port :http 3000)
        (with-port :ssh 6455))))
