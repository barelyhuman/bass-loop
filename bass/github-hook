#!/usr/bin/env bass

; memoize dependency resolution
(def *memos* *dir*/bass.lock)

(use (.git (linux/alpine/git))
     (*dir*/github.bass)
     (git:github/vito/tabs/ref/main/nix.bass))

; a set of validations to run against a checkout of the repo
(defn checks [src]
  {:build (build src)})

; monolithic image containing dependencies for building and testing
(defn deps [src]
  {:file (nix:result
           (-> ($ nix build ".#depsOci")
               (with-mount src/nix/ ./nix/)
               (with-mount src/flake.nix ./flake.nix)
               (with-mount src/flake.lock ./flake.lock)
               (with-mount src/default.nix ./default.nix))
           ./image.tar)
   :platform {:os "linux"}
   :tag "latest"})

; a basic test: does it build?
(defn build [src]
  (from (deps src)
    (cd src/
      (-> ($ go install -buildvcs=false "github.com/livebud/bud")
          (with-env {:GOBIN "/share/go/bin"}))
      ($ yarn)
      ($ bud build))))

; called by bass-loop
(defn main []
  (for [event *stdin*]
    (github:check-hook event git:checkout checks)))
