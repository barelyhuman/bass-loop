(defn check-hook [checks git]
  (defn start-checks [src sha github]
    (let [src (git:checkout clone-url sha)]
      (map-pairs
        (fn [name thunk] (github:start-check thunk (str name) sha))
        (scope->list (checks src)))))

  (fn [payload event github]
    (case event
      "check_suite"
      (case payload
        {:action "requested"
         :repository {:clone-url clone-url}
         :check-suite {:head-sha sha}}
        (start-checks clone-url sha github)

        {:action "rerequested"
         :repository {:clone-url clone-url}
         :check-suite {:head-sha sha}}
        (start-checks clone-url sha github)

        unknown
        (log "ignoring action" :event event :action unknown))

      "check_run"
      (case payload
        {:action "rerequested"
         :repository {:clone-url clone-url}
         :check-run {:name name
                     :head-sha sha}}
        (let [selector (string->symbol name)
              src (git:checkout clone-url sha)
              thunk (selector (checks src))]
          (github:start-check thunk name sha))

        unknown
        (log "ignoring action" :event event :action unknown))

      "pull_request"
      (case payload
        {:action "opened"
         :pull-request {:head {:sha sha
                               :repo {:clone-url clone-url}}}}
        (start-checks clone-url sha github)

        {:action "reopened"
         :pull-request {:head {:sha sha
                               :repo {:clone-url clone-url}}}}
        (start-checks clone-url sha github)

        {:action "synchronize"
         :pull-request {:head {:sha sha
                               :repo {:clone-url clone-url}}}}
        (start-checks clone-url sha github)

        unknown
        (log "ignoring action" :event event :action unknown))

      _
      (log "ignoring event" :event event :payload (keys payload)))))
