(def stub-client
  (module [start-check]
    (defn start-check [thunk name sha]
      (start thunk null?))))

(provide [check-hook]
  (defop check-hook [event clone checks] scope
    (eval [check-hook-fn event (:*loop* scope stub-client) clone checks] scope))

  (defn check-hook-fn [{:event event :payload payload} client clone checks]
    (case event
      "check_suite"
      (case payload
        {:action "requested"
         :repository {:clone_url clone-url}
         :check_suite {:head_sha sha}}
        (start-checks client sha (checks (clone clone-url sha)))

        {:action "rerequested"
         :repository {:clone_url clone-url}
         :check_suite {:head_sha sha}}
        (start-checks client sha (checks (clone clone-url sha)))

        _
        (log "ignoring action" :event event :action payload:action))

      "check_run"
      (case payload
        {:action "rerequested"
         :repository {:clone_url clone-url}
         :check_run {:name name
                     :head_sha sha}}
        (let [selector (string->symbol name)
              src (clone clone-url sha)
              thunk (selector (checks src))]
          (client:start-check thunk name sha))

        _
        (log "ignoring action" :event event :action payload:action))

      "pull_request"
      (case payload
        {:action "opened"
         :pull_request {:head {:sha sha
                               :repo {:clone_url clone-url}}}}
        (start-checks client sha (checks (clone clone-url sha)))

        {:action "reopened"
         :pull_request {:head {:sha sha
                               :repo {:clone_url clone-url}}}}
        (start-checks client sha (checks (clone clone-url sha)))

        _
        (log "ignoring action" :event event :action payload:action))

      _
      (log "ignoring event" :event event :payload (keys payload))))

  (defn start-checks [client sha checks]
    (map-pairs
      (fn [name thunk] (client:start-check thunk (str name) sha))
      (scope->list checks)))
  )
