package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Forward represents a row from 'forwards'.
type Forward struct {
	ID          sql.NullInt64 `json:"id"`           // id
	UserID      string        `json:"user_id"`      // user_id
	LogicalAddr string        `json:"logical_addr"` // logical_addr
	RealAddr    string        `json:"real_addr"`    // real_addr
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Forward exists in the database.
func (f *Forward) Exists() bool {
	return f._exists
}

// Deleted returns true when the Forward has been marked for deletion from
// the database.
func (f *Forward) Deleted() bool {
	return f._deleted
}

// Insert inserts the Forward to the database.
func (f *Forward) Insert(ctx context.Context, db DB) error {
	switch {
	case f._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case f._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO forwards (` +
		`id, user_id, logical_addr, real_addr` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`
	// run
	logf(sqlstr, f.ID, f.UserID, f.LogicalAddr, f.RealAddr)
	if _, err := db.ExecContext(ctx, sqlstr, f.ID, f.UserID, f.LogicalAddr, f.RealAddr); err != nil {
		return logerror(err)
	}
	// set exists
	f._exists = true
	return nil
}

// Update updates a Forward in the database.
func (f *Forward) Update(ctx context.Context, db DB) error {
	switch {
	case !f._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case f._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE forwards SET ` +
		`user_id = $1, logical_addr = $2, real_addr = $3 ` +
		`WHERE id = $4`
	// run
	logf(sqlstr, f.UserID, f.LogicalAddr, f.RealAddr, f.ID)
	if _, err := db.ExecContext(ctx, sqlstr, f.UserID, f.LogicalAddr, f.RealAddr, f.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Forward to the database.
func (f *Forward) Save(ctx context.Context, db DB) error {
	if f.Exists() {
		return f.Update(ctx, db)
	}
	return f.Insert(ctx, db)
}

// Upsert performs an upsert for Forward.
func (f *Forward) Upsert(ctx context.Context, db DB) error {
	switch {
	case f._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO forwards (` +
		`id, user_id, logical_addr, real_addr` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`user_id = EXCLUDED.user_id, logical_addr = EXCLUDED.logical_addr, real_addr = EXCLUDED.real_addr `
	// run
	logf(sqlstr, f.ID, f.UserID, f.LogicalAddr, f.RealAddr)
	if _, err := db.ExecContext(ctx, sqlstr, f.ID, f.UserID, f.LogicalAddr, f.RealAddr); err != nil {
		return logerror(err)
	}
	// set exists
	f._exists = true
	return nil
}

// Delete deletes the Forward from the database.
func (f *Forward) Delete(ctx context.Context, db DB) error {
	switch {
	case !f._exists: // doesn't exist
		return nil
	case f._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM forwards ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, f.ID)
	if _, err := db.ExecContext(ctx, sqlstr, f.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	f._deleted = true
	return nil
}

// ForwardByID retrieves a row from 'forwards' as a Forward.
//
// Generated from index 'forwards_id_pkey'.
func ForwardByID(ctx context.Context, db DB, id sql.NullInt64) (*Forward, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, logical_addr, real_addr ` +
		`FROM forwards ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	f := Forward{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&f.ID, &f.UserID, &f.LogicalAddr, &f.RealAddr); err != nil {
		return nil, logerror(err)
	}
	return &f, nil
}

// User returns the User associated with the Forward's (UserID).
//
// Generated from foreign key 'forwards_user_id_fkey'.
func (f *Forward) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, f.UserID)
}
