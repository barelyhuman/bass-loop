package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Thunk represents a row from 'thunks'.
type Thunk struct {
	Sha256    string `json:"sha256"`    // sha256
	Sensitive int    `json:"sensitive"` // sensitive
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Thunk exists in the database.
func (t *Thunk) Exists() bool {
	return t._exists
}

// Deleted returns true when the Thunk has been marked for deletion from
// the database.
func (t *Thunk) Deleted() bool {
	return t._deleted
}

// Insert inserts the Thunk to the database.
func (t *Thunk) Insert(ctx context.Context, db DB) error {
	switch {
	case t._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case t._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO thunks (` +
		`sha256, sensitive` +
		`) VALUES (` +
		`$1, $2` +
		`)`
	// run
	logf(sqlstr, t.Sha256, t.Sensitive)
	if _, err := db.ExecContext(ctx, sqlstr, t.Sha256, t.Sensitive); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Update updates a Thunk in the database.
func (t *Thunk) Update(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case t._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE thunks SET ` +
		`sensitive = $1 ` +
		`WHERE sha256 = $2`
	// run
	logf(sqlstr, t.Sensitive, t.Sha256)
	if _, err := db.ExecContext(ctx, sqlstr, t.Sensitive, t.Sha256); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Thunk to the database.
func (t *Thunk) Save(ctx context.Context, db DB) error {
	if t.Exists() {
		return t.Update(ctx, db)
	}
	return t.Insert(ctx, db)
}

// Upsert performs an upsert for Thunk.
func (t *Thunk) Upsert(ctx context.Context, db DB) error {
	switch {
	case t._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO thunks (` +
		`sha256, sensitive` +
		`) VALUES (` +
		`$1, $2` +
		`)` +
		` ON CONFLICT (sha256) DO ` +
		`UPDATE SET ` +
		`sensitive = EXCLUDED.sensitive `
	// run
	logf(sqlstr, t.Sha256, t.Sensitive)
	if _, err := db.ExecContext(ctx, sqlstr, t.Sha256, t.Sensitive); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Delete deletes the Thunk from the database.
func (t *Thunk) Delete(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return nil
	case t._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM thunks ` +
		`WHERE sha256 = $1`
	// run
	logf(sqlstr, t.Sha256)
	if _, err := db.ExecContext(ctx, sqlstr, t.Sha256); err != nil {
		return logerror(err)
	}
	// set deleted
	t._deleted = true
	return nil
}

// ThunkBySha256 retrieves a row from 'thunks' as a Thunk.
//
// Generated from index 'sqlite_autoindex_thunks_1'.
func ThunkBySha256(ctx context.Context, db DB, sha256 string) (*Thunk, error) {
	// query
	const sqlstr = `SELECT ` +
		`sha256, sensitive ` +
		`FROM thunks ` +
		`WHERE sha256 = $1`
	// run
	logf(sqlstr, sha256)
	t := Thunk{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, sha256).Scan(&t.Sha256, &t.Sensitive); err != nil {
		return nil, logerror(err)
	}
	return &t, nil
}
