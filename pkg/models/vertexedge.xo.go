package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// VertexEdge represents a row from 'vertex_edges'.
type VertexEdge struct {
	SourceDigest string `json:"source_digest"` // source_digest
	TargetDigest string `json:"target_digest"` // target_digest
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the VertexEdge exists in the database.
func (ve *VertexEdge) Exists() bool {
	return ve._exists
}

// Deleted returns true when the VertexEdge has been marked for deletion from
// the database.
func (ve *VertexEdge) Deleted() bool {
	return ve._deleted
}

// Insert inserts the VertexEdge to the database.
func (ve *VertexEdge) Insert(ctx context.Context, db DB) error {
	switch {
	case ve._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ve._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO vertex_edges (` +
		`source_digest, target_digest` +
		`) VALUES (` +
		`$1, $2` +
		`)`
	// run
	logf(sqlstr, ve.SourceDigest, ve.TargetDigest)
	if _, err := db.ExecContext(ctx, sqlstr, ve.SourceDigest, ve.TargetDigest); err != nil {
		return logerror(err)
	}
	// set exists
	ve._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the VertexEdge from the database.
func (ve *VertexEdge) Delete(ctx context.Context, db DB) error {
	switch {
	case !ve._exists: // doesn't exist
		return nil
	case ve._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM vertex_edges ` +
		`WHERE source_digest = $1 AND target_digest = $2`
	// run
	logf(sqlstr, ve.SourceDigest, ve.TargetDigest)
	if _, err := db.ExecContext(ctx, sqlstr, ve.SourceDigest, ve.TargetDigest); err != nil {
		return logerror(err)
	}
	// set deleted
	ve._deleted = true
	return nil
}

// VertexEdgesBySourceDigest retrieves a row from 'vertex_edges' as a VertexEdge.
//
// Generated from index 'idx_vertex_edges_source_digest'.
func VertexEdgesBySourceDigest(ctx context.Context, db DB, sourceDigest string) ([]*VertexEdge, error) {
	// query
	const sqlstr = `SELECT ` +
		`source_digest, target_digest ` +
		`FROM vertex_edges ` +
		`WHERE source_digest = $1`
	// run
	logf(sqlstr, sourceDigest)
	rows, err := db.QueryContext(ctx, sqlstr, sourceDigest)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*VertexEdge
	for rows.Next() {
		ve := VertexEdge{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ve.SourceDigest, &ve.TargetDigest); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ve)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// VertexEdgesByTargetDigest retrieves a row from 'vertex_edges' as a VertexEdge.
//
// Generated from index 'idx_vertex_edges_target_digest'.
func VertexEdgesByTargetDigest(ctx context.Context, db DB, targetDigest string) ([]*VertexEdge, error) {
	// query
	const sqlstr = `SELECT ` +
		`source_digest, target_digest ` +
		`FROM vertex_edges ` +
		`WHERE target_digest = $1`
	// run
	logf(sqlstr, targetDigest)
	rows, err := db.QueryContext(ctx, sqlstr, targetDigest)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*VertexEdge
	for rows.Next() {
		ve := VertexEdge{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ve.SourceDigest, &ve.TargetDigest); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ve)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// VertexEdgeBySourceDigestTargetDigest retrieves a row from 'vertex_edges' as a VertexEdge.
//
// Generated from index 'sqlite_autoindex_vertex_edges_1'.
func VertexEdgeBySourceDigestTargetDigest(ctx context.Context, db DB, sourceDigest, targetDigest string) (*VertexEdge, error) {
	// query
	const sqlstr = `SELECT ` +
		`source_digest, target_digest ` +
		`FROM vertex_edges ` +
		`WHERE source_digest = $1 AND target_digest = $2`
	// run
	logf(sqlstr, sourceDigest, targetDigest)
	ve := VertexEdge{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, sourceDigest, targetDigest).Scan(&ve.SourceDigest, &ve.TargetDigest); err != nil {
		return nil, logerror(err)
	}
	return &ve, nil
}

// Thunk returns the Thunk associated with the VertexEdge's (TargetDigest).
//
// Generated from foreign key 'vertex_edges_target_digest_fkey'.
func (ve *VertexEdge) Thunk(ctx context.Context, db DB) (*Thunk, error) {
	return ThunkByDigest(ctx, db, ve.TargetDigest)
}
