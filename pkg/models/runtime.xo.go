package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Runtime represents a row from 'runtimes'.
type Runtime struct {
	UserID    string `json:"user_id"`    // user_id
	Name      string `json:"name"`       // name
	Os        string `json:"os"`         // os
	Arch      string `json:"arch"`       // arch
	ExpiresAt Time   `json:"expires_at"` // expires_at
	Priority  int    `json:"priority"`   // priority
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Runtime exists in the database.
func (r *Runtime) Exists() bool {
	return r._exists
}

// Deleted returns true when the Runtime has been marked for deletion from
// the database.
func (r *Runtime) Deleted() bool {
	return r._deleted
}

// Insert inserts the Runtime to the database.
func (r *Runtime) Insert(ctx context.Context, db DB) error {
	switch {
	case r._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case r._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO runtimes (` +
		`user_id, name, os, arch, expires_at, priority` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`
	// run
	logf(sqlstr, r.UserID, r.Name, r.Os, r.Arch, r.ExpiresAt, r.Priority)
	if _, err := db.ExecContext(ctx, sqlstr, r.UserID, r.Name, r.Os, r.Arch, r.ExpiresAt, r.Priority); err != nil {
		return logerror(err)
	}
	// set exists
	r._exists = true
	return nil
}

// Update updates a Runtime in the database.
func (r *Runtime) Update(ctx context.Context, db DB) error {
	switch {
	case !r._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case r._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE runtimes SET ` +
		`os = $1, arch = $2, expires_at = $3, priority = $4 ` +
		`WHERE user_id = $5 AND name = $6`
	// run
	logf(sqlstr, r.Os, r.Arch, r.ExpiresAt, r.Priority, r.UserID, r.Name)
	if _, err := db.ExecContext(ctx, sqlstr, r.Os, r.Arch, r.ExpiresAt, r.Priority, r.UserID, r.Name); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Runtime to the database.
func (r *Runtime) Save(ctx context.Context, db DB) error {
	if r.Exists() {
		return r.Update(ctx, db)
	}
	return r.Insert(ctx, db)
}

// Upsert performs an upsert for Runtime.
func (r *Runtime) Upsert(ctx context.Context, db DB) error {
	switch {
	case r._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO runtimes (` +
		`user_id, name, os, arch, expires_at, priority` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (user_id, name) DO ` +
		`UPDATE SET ` +
		`os = EXCLUDED.os, arch = EXCLUDED.arch, expires_at = EXCLUDED.expires_at, priority = EXCLUDED.priority `
	// run
	logf(sqlstr, r.UserID, r.Name, r.Os, r.Arch, r.ExpiresAt, r.Priority)
	if _, err := db.ExecContext(ctx, sqlstr, r.UserID, r.Name, r.Os, r.Arch, r.ExpiresAt, r.Priority); err != nil {
		return logerror(err)
	}
	// set exists
	r._exists = true
	return nil
}

// Delete deletes the Runtime from the database.
func (r *Runtime) Delete(ctx context.Context, db DB) error {
	switch {
	case !r._exists: // doesn't exist
		return nil
	case r._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM runtimes ` +
		`WHERE user_id = $1 AND name = $2`
	// run
	logf(sqlstr, r.UserID, r.Name)
	if _, err := db.ExecContext(ctx, sqlstr, r.UserID, r.Name); err != nil {
		return logerror(err)
	}
	// set deleted
	r._deleted = true
	return nil
}

// RuntimesByUserID retrieves a row from 'runtimes' as a Runtime.
//
// Generated from index 'idx_runtimes_user_id'.
func RuntimesByUserID(ctx context.Context, db DB, userID string) ([]*Runtime, error) {
	// query
	const sqlstr = `SELECT ` +
		`user_id, name, os, arch, expires_at, priority ` +
		`FROM runtimes ` +
		`WHERE user_id = $1`
	// run
	logf(sqlstr, userID)
	rows, err := db.QueryContext(ctx, sqlstr, userID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Runtime
	for rows.Next() {
		r := Runtime{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&r.UserID, &r.Name, &r.Os, &r.Arch, &r.ExpiresAt, &r.Priority); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &r)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// RuntimeByUserIDName retrieves a row from 'runtimes' as a Runtime.
//
// Generated from index 'sqlite_autoindex_runtimes_1'.
func RuntimeByUserIDName(ctx context.Context, db DB, userID, name string) (*Runtime, error) {
	// query
	const sqlstr = `SELECT ` +
		`user_id, name, os, arch, expires_at, priority ` +
		`FROM runtimes ` +
		`WHERE user_id = $1 AND name = $2`
	// run
	logf(sqlstr, userID, name)
	r := Runtime{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, userID, name).Scan(&r.UserID, &r.Name, &r.Os, &r.Arch, &r.ExpiresAt, &r.Priority); err != nil {
		return nil, logerror(err)
	}
	return &r, nil
}

// User returns the User associated with the Runtime's (UserID).
//
// Generated from foreign key 'runtimes_user_id_fkey'.
func (r *Runtime) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, r.UserID)
}
