package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// ThunkInput represents a row from 'thunk_inputs'.
type ThunkInput struct {
	TargetSha256 string `json:"target_sha256"` // target_sha256
	SourceSha256 string `json:"source_sha256"` // source_sha256
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the ThunkInput exists in the database.
func (ti *ThunkInput) Exists() bool {
	return ti._exists
}

// Deleted returns true when the ThunkInput has been marked for deletion from
// the database.
func (ti *ThunkInput) Deleted() bool {
	return ti._deleted
}

// Insert inserts the ThunkInput to the database.
func (ti *ThunkInput) Insert(ctx context.Context, db DB) error {
	switch {
	case ti._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ti._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO thunk_inputs (` +
		`target_sha256, source_sha256` +
		`) VALUES (` +
		`$1, $2` +
		`)`
	// run
	logf(sqlstr, ti.TargetSha256, ti.SourceSha256)
	if _, err := db.ExecContext(ctx, sqlstr, ti.TargetSha256, ti.SourceSha256); err != nil {
		return logerror(err)
	}
	// set exists
	ti._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the ThunkInput from the database.
func (ti *ThunkInput) Delete(ctx context.Context, db DB) error {
	switch {
	case !ti._exists: // doesn't exist
		return nil
	case ti._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM thunk_inputs ` +
		`WHERE target_sha256 = $1 AND source_sha256 = $2`
	// run
	logf(sqlstr, ti.TargetSha256, ti.SourceSha256)
	if _, err := db.ExecContext(ctx, sqlstr, ti.TargetSha256, ti.SourceSha256); err != nil {
		return logerror(err)
	}
	// set deleted
	ti._deleted = true
	return nil
}

// ThunkInputByTargetSha256SourceSha256 retrieves a row from 'thunk_inputs' as a ThunkInput.
//
// Generated from index 'sqlite_autoindex_thunk_inputs_1'.
func ThunkInputByTargetSha256SourceSha256(ctx context.Context, db DB, targetSha256, sourceSha256 string) (*ThunkInput, error) {
	// query
	const sqlstr = `SELECT ` +
		`target_sha256, source_sha256 ` +
		`FROM thunk_inputs ` +
		`WHERE target_sha256 = $1 AND source_sha256 = $2`
	// run
	logf(sqlstr, targetSha256, sourceSha256)
	ti := ThunkInput{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, targetSha256, sourceSha256).Scan(&ti.TargetSha256, &ti.SourceSha256); err != nil {
		return nil, logerror(err)
	}
	return &ti, nil
}
