package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// ThunkRun represents a row from 'thunk_runs'.
type ThunkRun struct {
	ID          string        `json:"id"`           // id
	ThunkSha256 string        `json:"thunk_sha256"` // thunk_sha256
	StartTime   int           `json:"start_time"`   // start_time
	EndTime     sql.NullInt64 `json:"end_time"`     // end_time
	Succeeded   sql.NullInt64 `json:"succeeded"`    // succeeded
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the ThunkRun exists in the database.
func (tr *ThunkRun) Exists() bool {
	return tr._exists
}

// Deleted returns true when the ThunkRun has been marked for deletion from
// the database.
func (tr *ThunkRun) Deleted() bool {
	return tr._deleted
}

// Insert inserts the ThunkRun to the database.
func (tr *ThunkRun) Insert(ctx context.Context, db DB) error {
	switch {
	case tr._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case tr._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO thunk_runs (` +
		`id, thunk_sha256, start_time, end_time, succeeded` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`
	// run
	logf(sqlstr, tr.ID, tr.ThunkSha256, tr.StartTime, tr.EndTime, tr.Succeeded)
	if _, err := db.ExecContext(ctx, sqlstr, tr.ID, tr.ThunkSha256, tr.StartTime, tr.EndTime, tr.Succeeded); err != nil {
		return logerror(err)
	}
	// set exists
	tr._exists = true
	return nil
}

// Update updates a ThunkRun in the database.
func (tr *ThunkRun) Update(ctx context.Context, db DB) error {
	switch {
	case !tr._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case tr._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE thunk_runs SET ` +
		`thunk_sha256 = $1, start_time = $2, end_time = $3, succeeded = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, tr.ThunkSha256, tr.StartTime, tr.EndTime, tr.Succeeded, tr.ID)
	if _, err := db.ExecContext(ctx, sqlstr, tr.ThunkSha256, tr.StartTime, tr.EndTime, tr.Succeeded, tr.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the ThunkRun to the database.
func (tr *ThunkRun) Save(ctx context.Context, db DB) error {
	if tr.Exists() {
		return tr.Update(ctx, db)
	}
	return tr.Insert(ctx, db)
}

// Upsert performs an upsert for ThunkRun.
func (tr *ThunkRun) Upsert(ctx context.Context, db DB) error {
	switch {
	case tr._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO thunk_runs (` +
		`id, thunk_sha256, start_time, end_time, succeeded` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`thunk_sha256 = EXCLUDED.thunk_sha256, start_time = EXCLUDED.start_time, end_time = EXCLUDED.end_time, succeeded = EXCLUDED.succeeded `
	// run
	logf(sqlstr, tr.ID, tr.ThunkSha256, tr.StartTime, tr.EndTime, tr.Succeeded)
	if _, err := db.ExecContext(ctx, sqlstr, tr.ID, tr.ThunkSha256, tr.StartTime, tr.EndTime, tr.Succeeded); err != nil {
		return logerror(err)
	}
	// set exists
	tr._exists = true
	return nil
}

// Delete deletes the ThunkRun from the database.
func (tr *ThunkRun) Delete(ctx context.Context, db DB) error {
	switch {
	case !tr._exists: // doesn't exist
		return nil
	case tr._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM thunk_runs ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, tr.ID)
	if _, err := db.ExecContext(ctx, sqlstr, tr.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	tr._deleted = true
	return nil
}

// ThunkRunsByThunkSha256 retrieves a row from 'thunk_runs' as a ThunkRun.
//
// Generated from index 'idx_thunk_runs_sha256'.
func ThunkRunsByThunkSha256(ctx context.Context, db DB, thunkSha256 string) ([]*ThunkRun, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, thunk_sha256, start_time, end_time, succeeded ` +
		`FROM thunk_runs ` +
		`WHERE thunk_sha256 = $1`
	// run
	logf(sqlstr, thunkSha256)
	rows, err := db.QueryContext(ctx, sqlstr, thunkSha256)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ThunkRun
	for rows.Next() {
		tr := ThunkRun{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&tr.ID, &tr.ThunkSha256, &tr.StartTime, &tr.EndTime, &tr.Succeeded); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &tr)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ThunkRunByID retrieves a row from 'thunk_runs' as a ThunkRun.
//
// Generated from index 'sqlite_autoindex_thunk_runs_1'.
func ThunkRunByID(ctx context.Context, db DB, id string) (*ThunkRun, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, thunk_sha256, start_time, end_time, succeeded ` +
		`FROM thunk_runs ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	tr := ThunkRun{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&tr.ID, &tr.ThunkSha256, &tr.StartTime, &tr.EndTime, &tr.Succeeded); err != nil {
		return nil, logerror(err)
	}
	return &tr, nil
}

// Thunk returns the Thunk associated with the ThunkRun's (ThunkSha256).
//
// Generated from foreign key 'thunk_runs_thunk_sha256_fkey'.
func (tr *ThunkRun) Thunk(ctx context.Context, db DB) (*Thunk, error) {
	return ThunkBySha256(ctx, db, tr.ThunkSha256)
}
